Directory 'big' contains stuff related to strtod() tests and implementation
on "big" computers. Primarily it means iAMD64 on Windows, because it's where
I am testing the stuff. Hopefully, everything will work with no or minimal
changes on Linux and Mac, both iAMD64 and ARMv8-a. But I didn't test it myself
and have no intentions to do it in the near future.

Pay attention that this stuff was not tested on 32-bit computers, not intended
for 32-bit computers and even if by chance something happens to work on 32-bit
computers, it's almost certainly not as fast as possible there.

My main compilation platforms for this group of tests are
- gcc/g++ under MSYS2 (with latest versions GMP and MPFR).
  According to my understanding C RTL of this variant of gcc is based on
  Microsoft's DLL supplied with VS2013. I.e. quite outdated.

- Visual Studio 2019. I use command line compiler (cl) running it from
  "x64 Native Tools Command Prompt". Version 19.27.29111.
  C RTL here is of new "backward compatible to 2015" variety.
  I didn't figure out how to install GMP and MPFR here, so not every
  test or utility can be compiled.

Of course, instead of GMP and MPFR I could have used Boost.Multiprecision
package, but it would complicate a life of those who want to repeat or extend
my experiments (which I am encouraging).
Besides, compilation times of Boost.Multiprecision makes me nervous. Not good
when the fun is a prime objective.

Most of the stuff is written in C++, but it's as C-style as practical.
Two main reason I didn't write it in C are cross-platform high-resolution
time measurements (<chrono>) and properly designed PRNG (<random>).
I can occasionally use <algorithm> and simple containers, but that was of
secondary significance.

License:
Permissive.
May be, MIT? Or BSD? Not that I really know the difference.


Short description of utilities:
1.1. gen_test1
 Generate strtod() test vector that consists of canonical
 17-digit representations of legal finite binary64 numbers.
 Optionally, user can control a number of generated items.

1.2. gen_test2
 Generate strtod() test vector with given # of digits (2 to 800)
 in decimal significand. Both decimal significand and decimal exponent are
 independent pseudo-random numbers uniformly distributed in their respective
 ranges.
 User has to specify a number of digit.
 Optionally, user can control a number of generated items as well as
 a minimum of and a maximum of limits of decimal exponent and seed of PRNG.

1.3. gen_test3
 Generate "evil" strtod() test vector. All test points reside exactly at middle points
 between two representable binary64 numbers.
 Optionally, user can control a number of generated items as well as
 a min/max limits of absolute value of generated numbers and seed of PRNG.

1.4. clib_test
 Test correctness and speed of C run time library implementation of strtod().
 Accepts test vectors in format, generated by gen_test1/gen_test2/gen_test3
 Optionally, user can control a number of repetitions of speed test thus
 increasing time measurement precision when the default is insufficient.

1.5. my_test
 The same as clib_test, but with alternative implementation of strtod().


Detailed description:
2.1. General
 gen_test1/gen_test2/gen_test3 utilities produce test vectors for strtod()
 or compatible library functions.
 clib_test/my_test consume generated test vectors as an input and run corectness
 and speed tests.
 gen_test* prints a test vector to standard output. In typical usage scenario
 standard output will be redirected to a file.

2.2. gen_test1
 Generate strtod() test vector that consists of canonical 17-digit
 representations of legal finite binary64 numbers.
 Usage:
 gen_test1 [?] [-?] [count]
 where
 count - [optional] number of items to generate. Range [1:100000000]. Default 100000.

2.3. gen_test2
 Generate strtod() test vector with given # of digits (2 to 800) in decimal
 significand. Both decimal significand and decimal exponent are independent
 pseudo-random numbers uniformly distributed in their respective ranges.
 Usage:
 gen_test2 nDigits [-c=count] [-emin=nnn] [-emax=xxx] [-s=seed] [?] [-?]
 where
 nDigits - number of significant decimal digits
 count   - [optional] number of items to generate. Range [1:100000000]. Default 100000.
 nnn     - [optional] lower edge of the range of decimal exponents. Default=-325
 xxx     - [optional] upper edge of the range of decimal exponents. Default=+325
 seed    - [optional] PRNG seed. Default=1

2.4. gen_test3
 Generate "evil" strtod() test vector. All test points reside exactly at middle points
 between two representable binary64 numbers.
 Usage:
 gen_test3 [-c=count] [-fmin=nnn] [-fmax=xxx] [-dev=ddd] [-s=seed] [-?] [?]
 where
 count - [optional] number of items to generate
 nnn   - [optional] lower edge of the range of absolute values of generated number. Default=0
 xxx   - [optional] upper edge of the range of absolute values of generated number. Default=DBL_MAX
 ddd   - [optional] deviation factor. Range [0:1], Default=0.
         Non-zero ddd specifies that test point will be chosen from range (MPt-ULP*0.5*ddd:MPt+ULP*0.5*ddd)
 seed  - [optional] PRNG seed. Default=1

2.5. clib_test
 Test correctness and speed of C run time library implementation of strtod().
 Accepts test vectors in format, generated by gen_test1/gen_test2/gen_test3
 Usage:
 clib_test inp-file-name [nRep]
 where
 inp-file-name - name/path of the test vector file
 nRep          - [optional] number of repetition during speed test. Default 1.

2.6. my_test
 The same as clib_test, but tests an alternative implementation of strtod().

Build instructions:
MSVC:
gen_test1
cl -W4 -Ox -EHsc gen_test1.cpp

clib_test
cl -W4 -Ox -EHsc clib_test.cpp

my_test
cl -W4 -Ox -EHsc clib_test.cpp my_strtod.c -DMY_STRTOD -Fe: my_test

I didn't try to build gen_test2 or gen_test3, because I don't know how to use GMP with MSVC.

gcc:
gen_test1
g++ -O2 -Wall gen_test1.cpp -o gen_test1

gen_test2
g++ -O2 -Wall gen_test2.cpp -lgmp -o gen_test2

gen_test3
g++ -O2 -Wall gen_test3.cpp -lgmp -o gen_test3

clib_test
g++ -O2 -Wall clib_test.cpp -o clib_test

my_test
gcc -c -O2 -Wall my_strtod.c
g++ -O2 -Wall clib_test.cpp my_strtod.o -DMY_STRTOD -o my_test
