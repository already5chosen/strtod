Directory 'big' contains stuff related to strtod() tests and implementation
on "big" computers. Primarily it means iAMD64 on Windows, because it's where
I am testing the stuff. Hopefully, everything will work with no or minimal
changes on Linux and Mac, both iAMD64 and ARMv8-a. But I didn't test it myself
and have no intentions to do it in the near future.

Pay attention that this stuff was not tested on 32-bit computers, not intended
for 32-bit computers and even if by chance something happens to work on 32-bit
computers, it's almost certainly not as fast as possible there.

My main compilation platforms for this group of tests are
- gcc/g++ under MSYS2 (with latest versions GMP and MPFR).
  According to my understanding C RTL of this variant of gcc is based on
  Microsoft's DLL supplied with VS2013. I.e. quite outdated.

- Visual Studio 2019. I use command line compiler (cl) running it from
  "x64 Native Tools Command Prompt". Version 19.27.29111.
  C RTL here is of new "backward compatible to 2015" variety.
  I didn't figure out how to install GMP and MPFR here, so not every
  test or utility can be compiled.

Of course, instead of GMP and MPFR I could have used Boost.Multiprecision
package, but it would complicate a life of those who want to repeat or extend
my experiments (which I am encouraging).
Besides, compilation times of Boost.Multiprecision makes me nervous. Not good
when the fun is a prime objective.

Most of the stuff is written in C++, but it's as C-style as practical.
Two main reason I didn't write it in C are cross-platform high-resolution
time measurements (<chrono>) and properly designed PRNG (<random>).
I can occasionally use <algorithm> and simple containers, but that was of
secondary significance.

License:
Permissive.
May be, MIT? Or BSD? Not that I really know the difference.


Short description of utilities:
1. gen_test1
 Generate strtod() test vector that consists of canonical
 17-digit representations of legal finite binary32 numbers.
 Optionally, user can control a number of generated items.

2. gen_test2
 Generate strtod() test vector with given # of digits (2 to 800)
 in decimal significand. Both decimal significand and decimal exponent are
 independent pseudo-random numbers uniformally distributed in their respective
 ranges.
 User has to specify a number of digit.
 Optionally, user can control a number of generated items as well as
 a minimum of and a maximum of limits of decimal exponent.

3. clib_test
 Test correctness and speed of C run time library implementation of strtod().
 Accepts test vectors in format, generated by gen_test1/gen_test2
 Optionally, user can control a number of repetitions of speed test thus
 increasing time measurement precision when the default is insufficient.


Detailed description:
TODO

